{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","HistoryBoard","currentBoard","Board","i","winner","this","squares","boardRows","counter","row","j","push","renderSquare","board","gerarBoard","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","historyReversed","slice","length","calculateWinner","setState","concat","step","reverse","map","move","desc","jumpTo","status","current","moves","gerarBoardHistorico","handleClick","reordernar","reversed","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53899330.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button \n            className=\"square\" \n            onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\nfunction HistoryBoard(props) {\n    return (\n        <div>\n            <div className=\"history-board\">\n                <div className=\"square\">{props.currentBoard[0]}</div>\n                <div className=\"square\">{props.currentBoard[1]}</div>\n                <div className=\"square\">{props.currentBoard[2]}</div>\n             </div>\n             <div className=\"history-board\">\n                <div className=\"square\">{props.currentBoard[3]}</div>\n                <div className=\"square\">{props.currentBoard[4]}</div>\n                <div className=\"square\">{props.currentBoard[5]}</div>\n             </div>\n             <div className=\"history-board\">\n                <div className=\"square\">{props.currentBoard[6]}</div>\n                <div className=\"square\">{props.currentBoard[7]}</div>\n                <div className=\"square\">{props.currentBoard[8]}</div>\n             </div>\n        </div>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                winner={this.props.winner}\n                value={this.props.squares[i]} \n                onClick={() => this.props.onClick(i)}    \n            />\n        );\n    }\n\n    gerarBoard() {\n        let boardRows = [];\n        let counter = 0;\n\n        for(let i = 0; i < 3; i++) {\n            let row = [];\n            for(let j = 0; j < 3; j++) {\n                row.push(this.renderSquare(counter));\n                counter++;\n            }\n            boardRows.push(<div className=\"board-row\">{row}</div>);\n        }\n        return boardRows;\n    }\n\n    render() {\n\n        let board = this.gerarBoard();\n\n        return (\n            <div>\n                {board}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n            historyReversed: false,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,   \n        });\n    }\n    \n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    reordernar() {\n        if (!(this.state.historyReversed)) {\n            this.setState({\n                historyReversed: true,\n            });\n        }\n        else {\n            this.setState({\n                historyReversed: false,\n            });\n        }\n    }\n\n    gerarBoardHistorico() {\n        let history = this.state.history;\n        if (this.state.historyReversed) {\n            history = this.state.history.slice(0).reverse();\n        }\n\n        let counter = 0;\n\n        const moves = history.map((step, move) => {\n\n            if (this.state.historyReversed) {\n                move = (this.state.history.length - 1) - counter;\n                counter++;\n            }\n\n            const desc = move ?\n            'Go to move #' + move :\n            'Go to game start';\n            return (\n                <li key={move}>\n                    {\n                        move === this.state.stepNumber ?\n                        <button className=\"current-board\" onClick={() => this.jumpTo(move)}>{desc}</button> : \n                        <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                    }\n                    {\n                        this.state.historyReversed ? \n                            <HistoryBoard className=\"history-board\" currentBoard={history[counter - 1].squares} /> : \n                            <HistoryBoard className=\"history-board\" currentBoard={history[move].squares} />\n                    }\n                </li>\n            )\n        });\n\n        return moves;\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = this.gerarBoardHistorico();\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + current.squares[winner[0]]; // aqui poderia ser qualquer posição do array que a função calculateWinner está retornando, uma vez que todas apontarão para a letra vencedora (X ou O)\n        }\n        else {\n            status = 'Next Player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        winner={winner}\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <button className=\"reorder\" onClick={() => this.reordernar()}>Reordenar Jogadas</button>\n                    {\n                        this.state.historyReversed ? \n                        <ol reversed={true}>{moves}</ol> : \n                        <ol>{moves}</ol>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n\n    for (let i = 0; i< lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return lines[i];\n        }\n    }\n    return null;\n}"],"sourceRoot":""}